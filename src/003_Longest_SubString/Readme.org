#+TITLE: Longest Substring

[[https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/][Leetcode-cn]]

* Problem
Given a string, find the length of the longest substring without repeating characters.
*Example 1*
#+BEGIN_EXAMPLE
Input: "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
#+END_EXAMPLE

*Example 2*
#+BEGIN_EXAMPLE
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
#+END_EXAMPLE

*Example 3*
#+BEGIN_EXAMPLE
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
#+END_EXAMPLE

* Solution
A typical two pointer or slide window problem.
The algorithm describes in below:
1. Define front pointer fp at position 0, define back pointer bp at position 0.
2. Check whether next character of fp has repeat character between fp and bp.
3. If not, move fp forward; And back to step 2
4. If yes,
   - compare current string length with already saved maximum string, if
     exceeds, then save current string to maxmum string
   - move bp to next character of the repeat character
   - move fp to next character, and back to step 2

The tricky part is how to detect whether the next character is repeat between bp
and fp, we could build a hash map to store the characters between bp and fp with
its position, so that the check time is constant. In this case, the space
complexity is O(n) time complexity is n,
*
